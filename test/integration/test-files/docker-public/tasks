#!/bin/bash
set -e

RELEASER_VERSION="2.0.0"
RELEASER_FILE="ops/releaser-${RELEASER_VERSION}"

mkdir -p ops
if [[ ! -f $RELEASER_FILE ]];then
  wget --quiet -O $RELEASER_FILE https://github.com/kudulab/releaser/releases/download/2.0.0/releaser
fi
source $RELEASER_FILE

docker_ops=$(readlink -f ../../../../src/docker-ops)
source ${docker_ops}
if [[ -f ./releaser ]]; then
  # This goes as last in order to let end user variables override default values
  releaser_init
fi

image_dir="./image"
imagerc_filename="imagerc"
image_registry="dockerhub"
image_name="docker-ops-public"

set -u
command="$1"
case "${command}" in
  build_public)
      image_tag="${2:-temp}"
      docker_ops::docker_build "${image_dir}" "${imagerc_filename}" "${image_name}" "${image_tag}"
      exit $?
      ;;
  test_public)
      # this defaults to a local image, without registry set, but
      # let's make it settable, so that we can test an image from docker hub,
      # without building it locally
      KUDU_DOCKER_IMAGE_URL="${2:-${image_name}:temp}"
      export KUDU_DOCKER_IMAGE_URL
      echo "Testing image: ${KUDU_DOCKER_IMAGE_URL}"
      time bats --pretty "$(pwd)/test/integration/bats"
      ;;
  example_public)
      KUDU_DOCKER_IMAGE_URL="${2:-${image_name}:temp}"
      echo "Testing image: ${KUDU_DOCKER_IMAGE_URL}"
      docker run --rm ${KUDU_DOCKER_IMAGE_URL}
      ;;
  set_version)
      if [[ -n "$2" ]]; then
        next_version="$2"
      else
        version=$(releaser::get_last_version_from_whole_changelog "${changelog_file}")
        next_version=$(releaser::bump_patch_version "${version}")
      fi
      releaser::set_version_in_changelog "${changelog_file}" "${next_version}"
      exit $?
      ;;
  verify_version)
      releaser::verify_changelog_version
      exit $?
      ;;
  build)
      # AI-Traders private opinionated way of building a docker image.
      # latest git commit hash
      image_tag=$(git rev-parse HEAD)
      ./tasks build_public "${image_tag}"
      ;;
  test)
      docker_ops::ensure_pulled_image "${image_dir}" "${imagerc_filename}"
      ./tasks test_public "${KUDU_DOCKER_IMAGE_URL}"
      ;;
  example)
      docker_ops::ensure_pulled_image "${image_dir}" "${imagerc_filename}"
      ./tasks example_public "${KUDU_DOCKER_IMAGE_URL}"
      ;;
  release)
      ./tasks verify_version
      version=$(releaser::get_last_version_from_whole_changelog "${changelog_file}")
      git tag "${version}" && git push origin "${version}"
      ;;
  publish)
      version=$(releaser::get_last_version_from_whole_changelog "${changelog_file}")
      docker_ops::retag_push "${image_dir}"  "${imagerc_filename}" "${image_name}" "${version}" "${image_registry}"
      exit $?
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e

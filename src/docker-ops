#!/bin/bash

# Copyright 2019 Ewa Czechowska, Tomasz SÄ™tkowski
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -Eeuo pipefail

docker_ops::program_name() {
  echo "DOCKER-OPS"
}
docker_ops::log_debug() {
  if [ "${DOCKER_OPS_LOG_LEVEL}" == "debug" ]; then
    echo -e "$(date "+%d-%m-%Y %T") $(docker_ops::program_name) debug: ${1}" >&2
  fi
}
docker_ops::log_info() {
  echo -e "$(date "+%d-%m-%Y %T") $(docker_ops::program_name) info: ${1}" >&2
}
docker_ops::log_error() {
  echo -e "\e[31m$(date "+%d-%m-%Y %T") $(docker_ops::program_name) error: $1\e[0m" >&2
  echo -e "\e[31m$(date "+%d-%m-%Y %T") $(docker_ops::program_name) error: File: ${BASH_SOURCE[0]}\e[0m" >&2
  echo -e "\e[31m$(date "+%d-%m-%Y %T") $(docker_ops::program_name) error: Line numbers: ${BASH_LINENO[*]}\e[0m" >&2
}
docker_ops::log_warn() {
  echo -e "\e[33m$(date "+%d-%m-%Y %T") $(docker_ops::program_name) warn: $1\e[0m" >&2
}

# In order to load all the docker-ops functions once you can run:
# docker_ops || eval "$(curl http://archive.ai-traders.com/docker-ops/0.1.3/docker-ops)"
# Or you can simply wget that file and source it.
function docker_ops::loaded {
  return 0
}

# Returns full url to the docker image, with registry, name and tag
# Arguments:
# - short image name
# - image tag
# - (optional) docker registry (default is dockerhub)
function docker_ops::make_image_url {
  local image_name=${1?image_name not set}
  local image_tag=${2?image_tag not set}
  local image_registry="${3:-dockerhub}"
  local image_url="${image_name}:${image_tag}"
  if [ "${image_registry}" != "dockerhub" ]; then
    image_url="${image_registry}/${image_url}"
  fi
  echo "${image_url}"
}

# Returns url to the docker image with registry and name but without tag
# Arguments:
# - short image name
# - (optional) docker registry (default is dockerhub)
function docker_ops::make_image_name {
  local image_name=${1?image_name not set}
  local image_registry="${2:-dockerhub}"
  local image_url="${image_name}"
  if [ "${image_registry}" != "dockerhub" ]; then
    image_url="${image_registry}/${image_url}"
  fi
  echo "${image_url}"
}

# Creates files to be treated as build artifacts. Those files will contain:
# image name, image tag and the image registry which will be used to push_tmp
# a docker image. You should use this function once for each image (even if
# you want to docker push the production image to many docker registries)
function docker_ops::create_imagerc {
  local image_dir=${1?image_dir not set}
  local imagerc_filename=${2?imagerc_filename not set}
  local image_short_name=${3?image_name not set}
  local image_tag=${4?image_tag not set}
  local image_registry=${5:-dockerhub}
  local image_platform=${6:-}

  local image_name="$(docker_ops::make_image_name $image_short_name $image_registry)"
  local image_url="$(docker_ops::make_image_url $image_short_name $image_tag $image_registry)"

  mkdir -p "${image_dir}"
  echo "export KUDU_DOCKER_REGISTRY=\"${image_registry}\"" > "${image_dir}/${imagerc_filename}"
  echo "export KUDU_DOCKER_IMAGE_SHORT_NAME=\"${image_short_name}\"" >> "${image_dir}/${imagerc_filename}"
  echo "export KUDU_DOCKER_IMAGE_NAME=\"${image_name}\"" >> "${image_dir}/${imagerc_filename}"
  echo "export KUDU_DOCKER_IMAGE_TAG=\"${image_tag}\"" >> "${image_dir}/${imagerc_filename}"
  echo "export KUDU_DOCKER_IMAGE_URL=\"${image_url}\"" >> "${image_dir}/${imagerc_filename}"
  echo "export KUDU_DOCKER_IMAGE_PLATFORM=\"${image_platform}\"" >> "${image_dir}/${imagerc_filename}"

  echo "{ " > "${image_dir}/${imagerc_filename}.json"
  echo "\"docker_registry\": \"${image_registry}\"," >> "${image_dir}/${imagerc_filename}.json"
  echo "\"docker_image_short_name\": \"${image_short_name}\"," >> "${image_dir}/${imagerc_filename}.json"
  echo "\"docker_image_name\": \"${image_name}\"," >> "${image_dir}/${imagerc_filename}.json"
  echo "\"docker_image_tag\": \"${image_tag}\"," >> "${image_dir}/${imagerc_filename}.json"
  echo "\"docker_image_url\": \"${image_url}\"" >> "${image_dir}/${imagerc_filename}.json"
  echo "\"docker_image_platform\": \"${image_platform}\"" >> "${image_dir}/${imagerc_filename}.json"
  echo "}" >> "${image_dir}/${imagerc_filename}.json"

  echo "---" > "${image_dir}/${imagerc_filename}.yml"
  echo "docker_registry: \"${image_registry}\"" >> "${image_dir}/${imagerc_filename}.yml"
  echo "docker_image_short_name: \"${image_short_name}\"" >> "${image_dir}/${imagerc_filename}.yml"
  echo "docker_image_name: \"${image_name}\"" >> "${image_dir}/${imagerc_filename}.yml"
  echo "docker_image_tag: \"${image_tag}\"" >> "${image_dir}/${imagerc_filename}.yml"
  echo "docker_image_url: \"${image_url}\"" >> "${image_dir}/${imagerc_filename}.yml"
  echo "docker_image_platform: \"${image_platform}\"" >> "${image_dir}/${imagerc_filename}.yml"
}

function docker_ops::docker_build {
  local image_dir=${1?image_dir not set}
  local imagerc_filename=${2?imagerc_filename not set}
  local image_short_name=${3?image_short_name not set}
  local image_tag=${4:-}
  local image_registry=${5:-dockerhub}
  local image_platform=${6:-}

  docker_ops::log_info "image_dir set to: ${image_dir}"
  docker_ops::log_info "image_short_name set to: ${image_short_name}"
  docker_ops::log_info "imagerc_filename set to: ${imagerc_filename}"
  docker_ops::log_info "image_platform set to: ${image_platform}"
  initial_dir="$(pwd)"
  cd "${image_dir}"
  if [[ -z "${image_tag}" ]];then
    # set to the latest git commit hash
    image_tag=$(git rev-parse HEAD)
    docker_ops::log_info "image_tag was not set, using git sha: ${image_tag}"
  fi
  docker_ops::log_info "image_tag set to: ${image_tag}"
  local image_url="$(docker_ops::make_image_url $image_short_name $image_tag $image_registry)"

  set -x -e
  if [[ -z "${image_platform}" ]];then
    docker_ops::log_info "image_platform was not set, not setting it further"
    docker build ${docker_build_options} -t "${image_url}" .
  else
    docker build ${docker_build_options} --platform "${image_platform}" -t "${image_url}" .
  fi
  cd "${initial_dir}"
  docker_ops::create_imagerc "${image_dir}" "${imagerc_filename}" "${image_short_name}" "${image_tag}" "${image_registry}" "${image_platform}"
}

function docker_ops::source_imagerc {
  local image_dir=${1?image_dir not set}
  local imagerc_filename=${2?imagerc_filename not set}
  set -eu
  source "${image_dir}/${imagerc_filename}"
  echo "Sourced: ${image_dir}/${imagerc_filename}. Image is: ${KUDU_DOCKER_IMAGE_URL}"
}

function docker_ops::push {
  local image_dir=${1?image_dir not set}
  local imagerc_filename=${2?imagerc_filename not set}

  docker_ops::source_imagerc "$image_dir" "$imagerc_filename"
  if [[ "${dryrun}" != "true" ]];then
    if [[ -z "${KUDU_DOCKER_IMAGE_PLATFORM}" ]];then
      # platform not set
      docker push "${KUDU_DOCKER_IMAGE_URL}"
    else
      docker push  --platform "${KUDU_DOCKER_IMAGE_PLATFORM}" "${KUDU_DOCKER_IMAGE_URL}"
    fi
  fi
}

# This function ensures that the temporary image (= not published with a pretty
# tag to production docker registry) exists locally.
function docker_ops::ensure_pulled_image {
  local image_dir=${1?image_dir not set}
  local imagerc_filename=${2?imagerc_filename not set}

  set -e
  docker_ops::source_imagerc "${image_dir}" "${imagerc_filename}"
  local tmp_image="${KUDU_DOCKER_IMAGE_URL}"
  if ! docker inspect -f='{{.Id}}' "${tmp_image}" 1>/dev/null 2>&1; then
      # image does not exist locally
      ( set -x; docker pull "${tmp_image}"; )
  fi
}

# Runs "docker push" on an image sourced from image_dir
# Retags the image to new registry, name and tag as specified in arguments
function docker_ops::retag_push {
  local image_dir=${1?image_dir not set}
  local imagerc_filename=${2?imagerc_filename not set}
  local image_short_name=${3?image_short_name not set}
  local image_tag=${4?image_tag not set}
  local image_registry=${5:-dockerhub}
  local image_platform=${6:-}

  local production_image_name="$(docker_ops::make_image_name $image_short_name $image_registry)"

  set -e
  docker_ops::ensure_pulled_image "${image_dir}" "${imagerc_filename}"
  local tmp_image="${KUDU_DOCKER_IMAGE_URL}"
  set -x
  docker tag "${tmp_image}" "${production_image_name}:${image_tag}"
  docker tag "${tmp_image}" "${production_image_name}:latest"
  set +x
  if [[ "${dryrun}" != "true" ]]; then
    set -x
    if [[ -z "${image_platform}" ]];then
      # platform not set
      docker push "${production_image_name}:${image_tag}"
      docker push "${production_image_name}:latest"
    else
      docker push --platform "${image_platform}" "${production_image_name}:${image_tag}"
      docker push --platform "${image_platform}"  "${production_image_name}:latest"
    fi

    set +x
  else
    echo "Not running push, dryrun=${dryrun}"
  fi
  set +x
}

### Defaults
# allow those variables to be already set, so that user can set them in cli
imagerc_filename="${imagerc_filename:-imagerc}"
docker_build_options="${docker_build_options:-}"
dryrun="${dryrun:-false}"
DOCKER_OPS_LOG_LEVEL="${DOCKER_OPS_LOG_LEVEL:-info}"
